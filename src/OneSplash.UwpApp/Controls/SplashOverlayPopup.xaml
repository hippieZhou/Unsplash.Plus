<UserControl
    x:Class="OneSplash.UwpApp.Controls.SplashOverlayPopup"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:animations="using:Microsoft.Toolkit.Uwp.UI.Animations"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:local="using:OneSplash.UwpApp.Controls"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:toolkits="using:Microsoft.Toolkit.Uwp.UI.Controls"
    d:DesignHeight="300"
    d:DesignWidth="400"
    mc:Ignorable="d">

    <Grid x:Name="rootGrid" x:FieldModifier="public">
        <Grid.Background>
            <SolidColorBrush Opacity="0.8" Color="{ThemeResource SystemChromeAltHighColor}" />
        </Grid.Background>

        <interactivity:Interaction.Behaviors>
            <core:EventTriggerBehavior EventName="Tapped">
                <core:InvokeCommandAction Command="{x:Bind TappedCommand}" />
            </core:EventTriggerBehavior>
        </interactivity:Interaction.Behaviors>

        <Grid
            x:Name="destinationElement"
            x:FieldModifier="public"
            ManipulationCompleted="DestinationElement_ManipulationCompleted"
            ManipulationDelta="DestinationElement_ManipulationDelta"
            ManipulationMode="TranslateX, TranslateY, Scale"
            ManipulationStarted="DestinationElement_ManipulationStarted">
            <Grid.RenderTransform>
                <CompositeTransform x:Name="destinationElement_Transform" />
            </Grid.RenderTransform>
            <Grid
                x:Name="backgroundGrid"
                Margin="12,0"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Background="{ThemeResource ApplicationPageBackgroundThemeBrush}"
                CornerRadius="4" />
            <toolkits:ImageEx
                x:Name="HeroImage"
                Margin="0,12,0,0"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                HorizontalContentAlignment="Stretch"
                VerticalContentAlignment="Stretch"
                CornerRadius="4"
                EnableLazyLoading="True"
                IsCacheEnabled="True"
                Source="{x:Bind SelectedItem.ImageUri, Mode=OneWay}"
                Stretch="UniformToFill">
                <toolkits:ImageEx.Background>
                    <AcrylicBrush
                        BackgroundSource="Backdrop"
                        FallbackColor="{x:Bind SelectedItem.Color, Mode=OneWay}"
                        TintColor="{x:Bind SelectedItem.Color, Mode=OneWay}"
                        TintOpacity="1" />
                </toolkits:ImageEx.Background>
            </toolkits:ImageEx>
        </Grid>

        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="NarrowState">
                    <VisualState.StateTriggers>
                        <!--  VisualState to be triggered when window width is >0 effective pixels.  -->
                        <AdaptiveTrigger MinWindowWidth="0" />
                    </VisualState.StateTriggers>

                    <VisualState.Setters>
                        <Setter Target="destinationElement.Width" Value="420" />
                        <Setter Target="destinationElement.Height" Value="300" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="MiddleState">
                    <VisualState.StateTriggers>
                        <!--  VisualState to be triggered when window width is >960 effective pixels.  -->
                        <AdaptiveTrigger MinWindowWidth="961" />
                    </VisualState.StateTriggers>

                    <VisualState.Setters>
                        <Setter Target="destinationElement.Width" Value="800" />
                        <Setter Target="destinationElement.Height" Value="520" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="WideState">
                    <VisualState.StateTriggers>
                        <!--  VisualState to be triggered when window width is >=1440 effective pixels.  -->
                        <AdaptiveTrigger MinWindowWidth="1440" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="destinationElement.Width" Value="1200" />
                        <Setter Target="destinationElement.Height" Value="720" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>
</UserControl>
